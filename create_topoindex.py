# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreateTopoindex
                                 A QGIS plugin
 Create Topoindex.ini file for TRIGRS Map
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-05-30
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Wawan Hendriawan Nur
        email                : wawanhn@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox
#Add QgsProject
from qgis.core import QgsProject, Qgis, QgsMapLayer, QgsMapLayerProxyModel

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .create_topoindex_dialog import CreateTopoindexDialog
import os.path

#for executable file
import subprocess


class CreateTopoindex:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CreateTopoindex_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Create Topoindex')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CreateTopoindex', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/create_topoindex/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Toolbar Create Topoindex'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Create Topoindex'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CreateTopoindexDialog()
            self.dlg.pbCreateTopoindexIni1.clicked.connect(self.create_topoindex_ini)
            self.dlg.pbCalculateTopoindex1.clicked.connect(self.call_exe_file)
            self.dlg.leOutputFile1.hide()
            self.dlg.pbCalculateTopoindex1.hide()
            #

        #baca layer raster dan tampilkan di QMapLayerCombobox, dan panggil method saat QMapLayerCombobox dirubah
        self.dlg.mlcDEM1.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dlg.mlcDEM1.currentTextChanged.connect(self.fill_rows_cols_dem_layer)

        # baca layer raster dan tampilkan di QMapLayerCombobox, dan panggil method saat QMapLayerCombobox dirubah
        self.dlg.mlcFlowDirection1.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dlg.mlcFlowDirection1.currentTextChanged.connect(self.fill_rows_cols_flow_layer)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        
        # See if OK was pressed
        if result:
            pass
            #self.iface.messageBar().pushMessage("Berhasil", "Output file ditulis sebagai" + filename, level=Qgis.Success, duration=3)

            #subprocess.Popen("C:/TRIGRS/TopoIndex.exe")
            #subprocess.call(['C:\TRIGRS\TopoIndex.exe'])
            
            #subprocess.run(["C:/TRIGRS/TopoIndex.exe", "arg1", "arg2"])
            #subprocess.Popen(['C:/TRIGRS/TopoIndex.exe'], stdout=subprocess.PIPE)
            #subprocess.Popen(['TopoIndex.exe', r"cd C:/TRIGRS"],stdout=subprocess.PIPE, stderr=subprocess.PIPE,encoding = "ISO-8859-1", shell=True, text=True)

    def create_topoindex_ini(self):
        filename, _filter = QFileDialog.getSaveFileName(self.dlg, "Pilih output file", "", '*.ini')
        self.dlg.leOutputFile1.setText(filename)

        filename = self.dlg.leOutputFile1.text()
        with open(filename, 'w') as output_file:
            line = "Name of project (up to 255 characters)" + '\n'
            output_file.write(line)

            project_name = self.dlg.leProjectName1.text()
            line = ''.join(project_name + '\n')
            output_file.write(line)

            line = "Rows, Columns, flow-direction numbering scheme (ESRI=1, TopoIndex=2)" + '\n'
            output_file.write(line)

            rows = self.dlg.leRows1.text()
            columns = self.dlg.leColumns1.text()
            line = ''.join(rows + ', ' + columns + ', 1' + '\n')
            output_file.write(line)

            line = "Exponent, Number of iterations" + '\n'
            output_file.write(line)

            exponent = self.dlg.spbExponent1.text()
            iteration = self.dlg.spbIteration1.text()
            line = ''.join(exponent + ', ' + iteration + '\n')
            output_file.write(line)

            line = "Name of elevation grid file" + '\n'
            output_file.write(line)
            DEM = self.dlg.mlcDEM1.currentText()
            line = ''.join("c:\\TRIGRS\\data\\" + DEM + ".asc" + '\n')
            output_file.write(line)

            line = "Name of direction grid" + '\n'
            output_file.write(line)
            flowDirection = self.dlg.mlcFlowDirection1.currentText()
            line = ''.join("c:\\TRIGRS\\data\\"  + flowDirection + ".asc" + '\n')
            output_file.write(line)

            line = "Save listing of D8 downslope receptor cells?  Enter T (.true.) or F (.false.)" + '\n'
            output_file.write(line)
            listingDownSlope = self.dlg.cmbListingDownSlope1.currentText()
            line = ''.join(listingDownSlope + '\n')
            output_file.write(line)

            line = "Save grid of D8 downslope receptor cells? Enter T (.true.) or F (.false.)" + '\n'
            output_file.write(line)
            gridDownSlope = self.dlg.cmbGridDownSlope1.currentText()
            line = ''.join(gridDownSlope + '\n')
            output_file.write(line)

            line = "Save cell index number grid ? Enter T (.true.) or F (.false.)" + '\n'
            output_file.write(line)
            cellIndex = self.dlg.cmbCellIndex1.currentText()
            line = ''.join(cellIndex + '\n')
            output_file.write(line)

            line = "Save list of cell number and corresponding index number?  Enter T (.true.) or F (.false.)" + '\n'
            output_file.write(line)
            cellNumber = self.dlg.cmbCellNumber1.currentText()
            line = ''.join(cellNumber + '\n')
            output_file.write(line)

            line = "Save flow-direction grid remapped from ESRI to TopoIndex? Enter T (.true.) or F (.false.)" + '\n'
            output_file.write(line)
            flowDirectionRemap = self.dlg.cmbFlowDirectionRemap1.currentText()
            line = ''.join(flowDirectionRemap + '\n')
            output_file.write(line)

            line = "Name of folder to store output?" + '\n'
            output_file.write(line)
            line = ''.join("c:\\TRIGRS\\result\\" + '\n')
            output_file.write(line)

            line = "ID code for output files? (8 characters or less)" + '\n'
            output_file.write(line)
            IdCode = self.dlg.leIdCode1.text()
            line = ''.join(IdCode + '\n')
            output_file.write(line)

        self.dlg.pbCalculateTopoindex1.show()

        self.iface.messageBar().pushMessage("Berhasil", "Output file ditulis sebagai" + filename, level=Qgis.Success, duration=3)
        QMessageBox.information(self.dlg, "Informasi", "File Topoindex.ini berhasil dibuat")
        
    def fill_rows_cols_dem_layer(self):
        # read layer
        layer = self.dlg.mlcDEM1.currentText()
        rlayer = QgsProject.instance().mapLayersByName(layer)[0]

        cols = rlayer.width()
        rows = rlayer.height()
        self.dlg.leRows1.setText(str(rows))
        self.dlg.leColumns1.setText(str(cols))

    def fill_rows_cols_flow_layer(self):
        # read layer
        layer = self.dlg.mlcFlowDirection1.currentText()
        rlayer = QgsProject.instance().mapLayersByName(layer)[0]

        cols = rlayer.width()
        rows = rlayer.height()
        self.dlg.leRows1.setText(str(rows))
        self.dlg.leColumns1.setText(str(cols))


    def call_exe_file(self):
        try:
            # Replace with the actual path to your external program
            external_program_path = "C:/TRIGRS/TopoIndex.exe"
            subprocess.call([external_program_path, "arg1", "arg2"])
        except Exception as e:
            print(f"Error running external program: {e}")


